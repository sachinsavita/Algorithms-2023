Woks on divide and conquer.
1st rule = List should be in sorted order.
Need two pointers = l and h
Note: calculate mid=(l+h)/2 like this

Program: Using array and ArrayList

package SearchingAlgos;

import java.util.ArrayList;
import java.util.Collections;

public class BinarySearchDemo {
	
	//Method using array[]
	
	public static int binarySeach(int[] list,int key)
	{
		int l = 0;
		int h = list.length;
		
		for(int i = 0;i<list.length;i++)
		{
			
			int mid = (l+h)/2;
			
			if(list[mid]==key)
			{
				return mid;
			}
			else
			{
				if(key<list[mid])
				{
					h = mid;
				}
				else
				{
					l = mid;
				}
			}
			
		}
		
		return 0;
		
	}
	
	//Method using ArrayList<>();
	
	public static int binarySearchUsingCF(ArrayList<Integer> arrlist, int key)
	{
		int l = 0;
		int h = arrlist.size();

		
		for(int i=0;i<arrlist.size();i++)
		{
			int mid = (l+h)/2;
			
			if(arrlist.get(mid)==key)
			{
				return mid;
			}
			
			else
			{
				
				if(arrlist.get(mid)>key)
				{
					h = mid;
				}
				else
				{
					l = mid;
				}
			}
		}
		
		return 0;
	}

	public static void main(String[] args) {
		
		
		int [] list = {1,4,7,9,12,23,56,78,99,105,111,119};
		
		int resultIndex = BinarySearchDemo.binarySeach(list, 119);
		
		System.out.println(resultIndex);

		ArrayList<Integer> arr = new ArrayList<>();
		arr.add(5);
        arr.add(10);
        arr.add(15);
        arr.add(20);
        arr.add(25);
        arr.add(30);
        arr.add(35);

        Collections.sort(arr); 
        System.out.println(arr);
        
		Integer arrListResult = BinarySearchDemo.binarySearchUsingCF(arr, 35);
		
		System.out.println(arrListResult);
	}

}
